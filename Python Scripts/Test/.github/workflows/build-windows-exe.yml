name: Build Windows Executable # The name displayed in the Actions tab

# --- Triggers ---
on:
  # Option 1: Run automatically on pushes to the main branch
  push:
    branches: [ main ] # Adjust 'main' if your default branch is different (e.g., 'master')
    paths: # Optional: Only run if Python files or this workflow file change
      - '**.py'
      - '.github/workflows/build-windows-exe.yml'
      - 'ring.wav'

  # Option 2: Allow manual triggering from the GitHub Actions tab
  workflow_dispatch:

# --- Jobs ---
jobs:
  build:
    # Specify the runner environment - MUST be Windows for .exe
    runs-on: windows-latest

    steps:
      # 1. Check out your repository code
      - name: Checkout code
        uses: actions/checkout@v4 # Use the latest version of the checkout action

      # 2. Set up Python environment on the runner
      - name: Set up Python
        uses: actions/setup-python@v5 # Use the latest version of the setup-python action
        with:
          python-version: '3.11' # Specify the Python version you are using. Adjust if needed.

      # 3. Install necessary Python packages
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller==6.8.0 pyside6==6.7.1 # Pin versions for consistency, or remove versions to get latest
          # Add any other pip dependencies your script might have here

      # 4. Run PyInstaller to build the executable
      - name: Build executable with PyInstaller
        run: |
          pyinstaller --noconfirm --onefile --windowed --name CountdownTimer ^
            --add-data "ring.wav;." ^
            timerpyd.py
        # IMPORTANT: Replace 'your_script_name.py' with the actual filename of your Python script!
        # Explanation of PyInstaller options:
        # --noconfirm: Overwrite output directory without asking
        # --onefile: Create a single file executable
        # --windowed: Don't show a console window when the GUI app runs (use --console for debugging)
        # --name CountdownTimer: Sets the output executable name to CountdownTimer.exe
        # --add-data "ring.wav;.": Bundles 'ring.wav' from the repo root into the exe's root.
        #   Syntax is 'SOURCE;DESTINATION' on Windows (';' separator). '.' means the root inside the bundle.
        #   Use ':' separator if running PyInstaller directly on Linux/macOS. The Action runs on Windows.
        #   The caret (^) at the end of lines is for line continuation in Windows shell.

      # 5. Upload the built executable as an artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4 # Use the latest version of the upload-artifact action
        with:
          name: CountdownTimer-Windows-Executable # Name of the artifact zip file
          path: dist/CountdownTimer.exe # Path to the file created by PyInstaller
          if-no-files-found: error # Fail the workflow if the exe wasn't created
